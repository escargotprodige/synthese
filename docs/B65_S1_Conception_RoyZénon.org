#+OPTIONS: toc:nil title:nil num:nil
#+BEGIN_EXPORT latex
\begin{titlepage}
\centering
{\scshape\LARGE Cégep du Vieux Montréal \par}
\vspace{1cm}
{\scshape\LARGE Projet Synthèse\par}
\vspace{1.5cm}
{\huge\bfseries Calculatrice de statistiques d'items pour le jeu Borderlands 2\par}
\vspace{2cm}
{\Large\itshape Zénon Roy\par}
\vfill
Travail à remettre à\par
Jean-Christophe Demers
\vfill
	{\large Hiver 2019\par}
\end{titlepage}
#+END_EXPORT
* Présentation générale du projet
Dans le jeu Borderlands 2, les items sont générés aléatoirement.
Les items sont composés de pièces qui proviennent des différents fabriquants d'armes dans le jeu.
Chaque pièce a une influence sur les statistiques finales de l'item (dommage, balles par seconde, munitions, etc).
Le but du projet est de concevoir un site qui permet de calculer les statistiques finales d'un item en choisissant les pièces qui le compose.
Je me suis inspiré de [[http://thegearcalculator.appspot.com/][ce projet]] pour faire le mien.
* Présentation précise du projet
Le projet est divisé en deux parties: le serveur et le client web.
** Le serveur
   Le serveur utilise la plateforme NodeJS et a plusieurs responsabilités:
   - API GraphQL
     - Faire des opérations CRUD sur le modèle (voir diagramme bd)
     - Calculer les statistiques des items
   - "Server-Side Rendering" avec [[https://nuxtjs.org/][Nuxt]] (gestion de la vue)
   - [[https://www.prisma.io][Prisma]] pour la gestion des données (communique avec MongoDB)
** Le client web
   Le client web communique avec l'API avec une interface simple à utiliser. Il permet de:
  - Sélectionner les pièces d'un item et faire la requête sur le serveur
  - Voir les statistiques d'un item selon les pièces choisies
  - Consulter et modifier les données des pièces
  - Consulter et modifier les statistiques de base des items
  Les technologies utilisées sont:
  - le framework [[https://vuejs.org/][VueJS]]
  - la librairie [[https://vue-apollo.netlify.com/][Vue-Apollo]] pour faire des requêtes sur le serveur
  - la librairie [[https://vuetifyjs.com/en/][Vuetify]] pour une présentation avec le style Material Design
** Fonctionnement des items 
  Voici comment les statistiques d'une arme sont calculées:
  1. L'utilisateur choisit le type d'arme, son niveau, sa rareté ainsi que son fabriquant.
  2. Le serveur retourne les pièces qui sont disponibles selon les choix du #1
  3. L'utilisateur choisit parmis les pièces qui sont disponibles
  4. Selon les pièces choisies, le serveur fait le calcul suivant:
     1. applique les effets des pièces aux statistiques de bases (déterminés par les choix du #1)
     2. applique les bonus de fabriquants (si le fabriquant d'une pièce est le même que celui de l'arme, il y a un certain bonus)
     3. applique le "level scaling". Certaines statistiques, comme le dommage, sont à l'échelle du niveau de l'arme.
     4. sélectionne le préfixe qui a la plus grande priorité et détermine le titre de l'arme
* Présentation des patrons de conceptions envisagés
** MVVM (Modèle - Vue - Vue-Modèle)
   Le framework VueJS est inspiré du patron MVVM. C'est une autre façon de séparer la vue du modèle dans le but d'avoir du code plus propre.
   La partie Vue-Modèle gère les communications avec le modèle pour la vue.
** GraphQL
   [[https://graphql.org/][GraphQL]] est un nouveau standard pour créer des APIs. Il a été créé par Facebook dans le but de régler les problèmes des APIs REST.
   Raisons pourquoi le serveur utilise une architecture GraphQL:
   - Permet d'obtenir toutes les données nécessaires avec une seule requête. Avec un API REST, il faudrait faire plusieurs requêtes pour avoir les mêmes données.
   - C'est le client qui détermine les données dont il a besoin, donc le serveur n'envoit pas de données inutiles.
   - Puisque c'est un standard populaire dans le monde du web, il y a une multitude d'outils qui aident au développement (débogueurs de requêtes, librairies, outils d'analyse de performance, etc).
   - Le système de types permet de mieux construire des requêtes parce qu'on sait avoir quelles données on travaille
* Aspects techniques de la conception
** Cas d'usage
   [[./assets/susecases.png]]
** Diagramme de base de données
   [[./assets/bd.png]]
** Conception des interfaces usagers
*** Page principale / calcul des statistiques
    [[./assets/calculatrice.png]]
*** liste des pièces/items
    [[./assets/liste-parties.png]]
*** Détails d'une pièce ou un item
    [[./assets/partie-stats.png]]
